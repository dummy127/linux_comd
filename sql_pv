-- 12-07-2025-- 12-07-2025-- 12-07-2025-- 12-07-2025-- 12-07-2025-- 12-07-2025-- 12-07-2025
-- 12-07-2025-- 12-07-2025-- 12-07-2025-- 12-07-2025

CREATE DATABASE food_app;

USE food_app;
-- 1. Create Tables

CREATE TABLE restaurants (
    rest_id      INT PRIMARY KEY,
    rest_name    VARCHAR(100),
    city         VARCHAR(50)
);

CREATE TABLE orders (
    order_id      INT PRIMARY KEY,
    rest_id       INT,
    customer_name VARCHAR(100),
    order_amount  DECIMAL(10,2),
    order_date    DATE,
    order_status  VARCHAR(20),  -- 'Placed', 'Delivered', 'Cancelled'
    FOREIGN KEY (rest_id) REFERENCES restaurants(rest_id)
);


-- 2. Insert sample data

INSERT INTO restaurants VALUES (1, 'Burger Hub', 'Delhi');
INSERT INTO restaurants VALUES (2, 'Pizza King', 'Mumbai');
INSERT INTO restaurants VALUES (3, 'Biryani Express', 'Hyderabad');

INSERT INTO orders VALUES (101, 1, 'Alice',   250.00, '2025-07-01', 'Delivered');
INSERT INTO orders VALUES (102, 1, 'Bob',     400.00, '2025-07-03', 'Cancelled');
INSERT INTO orders VALUES (103, 2, 'Charlie', 600.00, '2025-07-05', 'Delivered');
INSERT INTO orders VALUES (104, 3, 'Diana',   350.00, '2025-07-06', 'Delivered');
INSERT INTO orders VALUES (105, 3, 'Eve',     200.00, '2025-07-09', 'Delivered');
INSERT INTO orders VALUES (106, 2, 'Frank',   500.00, '2025-07-10', 'Placed');

select * from orders;

-- in out inout 

delimiter $
create procedure proc()

begin 
select * from restaurants;
end$

create procedure cus_name(in cus_name varchar(30))

begin
select * from orders where customer_name = cus_name;
end$

create procedure order_id_user(in id int ,out stat varchar(25))
begin
select order_status into stat from orders where order_id=id;
end$

create procedure cust_change(in id int, inout current_stat varchar(50))
begin
declare stat varchar(50);
select order_status into stat from orders o where order_id =id;
update orders set order_status=current_stat where order_id=id;
set current_stat =stat;
end$

delimiter ;


call proc();
call cus_name("alice");
call order_id_user(101,@st);

select @st;

select * from orders;
set @a=1;

set @userstat = "placed";

call cust_change(101,@userstat);

select @userstat;



-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025
-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025-- 19-07-2025

CREATE TABLE students (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100),
    marks INT
);

INSERT INTO students (name, marks) VALUES
('Aarav', 85),
('Bhavna', 42),
('Chirag', 67),
('Divya', 30),
('Esha', 95);

select * from students;

delimiter $

create function addition(a int , b int)
returns int deterministic

begin
return a+b;
end$

create function subt(a int , b int)
returns int deterministic
begin 
return a-b;
end$

create function oddeven(a int)
returns boolean deterministic

begin
return a%2=0;
end$

create function vote(a int)
returns varchar(20) deterministic
begin 
if a>17 then
return "you can vote";
end if;
return " you cannot vote";
end$

create function price(a int)
returns varchar(20) deterministic

begin 
if a>500 then
return "Price is too high";
end if;
return "Price is too low";
end$


create function result(a int)
returns varchar(20) deterministic
begin 
if a>40 then
return "Successful result";
end if;
return "Failed result";
end$

create function showgrade(mar int)
returns varchar(25) deterministic
begin 
 if mar between 1 and 40 then
 return "your grade is C";
  elseif mar between 41 and 60 then
 return "your grade is B";
  elseif mar between 61 and 100 then
 return "your grade is A";
 else 
 return "Invalid input";
 end if;
end$

create function payment(pr varchar(50))
returns varchar(25) deterministic
begin 
 if pr = "Delivered" then
 return "Payment is done";
  elseif pr = "Cancelled" then
 return "amount to be refunded";
  elseif pr = "Placed" then
 return "amount is processing";
 else 
 return "Invalid input";
 end if;
end$

delimiter ;

select * from orders;
-- drop function payment;
select addition(87,8);
select subt(87,8);
select vote(77);

select order_id,addition(order_id,10),subt(order_id,7) from orders;

select rest_id,addtion(rest_id,5) from orders;

select oddeven(-78777770);

select order_amount, price(order_amount) from orders;

select marks,result(marks) from students;

select marks,showgrade(marks) from students;

select * from employee;

select * from orders;

select customer_name,order_status,payment(order_status) as pay_status from orders;



delimiter $

create procedure loopexample()
begin 
 declare n int;
 set n=1;
	firstloop:loop
    if n=10 then 
    leave firstloop;
    end if ;
    
    select concat("hello world","hello world");
    set n=n+1;
    end loop firstloop;
end$

delimiter ;

drop procedure loopexample;

call loopexample();



-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025
-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025-- 26/07/2025


-- triggers triggers trigggers triggers

-- before update 
-- after update 

-- before insert 
-- after insert

-- before delete
-- after delete

-- new old 


select * from orders;

drop table employee;

Create Table employee ( eid int primary key, firstname varchar(50), lastname varchar(50), 
pay_per_hr int, working_hours int, amount_to_pay int); 


select * from employee;
desc employee;


delimiter $

create trigger mytrigger
before insert 
on employee for each row 
begin
set new.amount_to_pay=new.pay_per_hr*new.working_hours;
end$


create trigger mytrigger2 
before update
on employee for each row 
begin
set new.amount_to_pay=new.pay_per_hr*new.working_hours;
end$

create trigger pre_pay 
before update 
on employee for each row 
begin
set new.pre_payroll=old.pay_per_hr;
end$

create trigger account_count
before insert 
on account for each row
begin
update user set total_acc = total_acc+1 where id=new.user_id;
end$


create trigger before_del
before delete 
on account
for each row
begin
delete set 
end

delimiter ;



insert into employee (eid,firstname,lastname,pay_per_hr,working_hours) values(101,"aradhya", "ambole" , 500,5);
insert into employee (eid,firstname,lastname,pay_per_hr,working_hours) values(102,"rugved", "chavan" , 200,9);

insert into employee (eid,firstname,lastname,pay_per_hr,working_hours) values(103,"pranay","borker",600,12);

select * from employee;

update employee set working_hours=24 where eid=103;

update employee set pay_per_hr=244 where eid=103;

alter table employee add column pre_payroll int;

select * from employee;

create table user(
id int, 
name varchar(30),
total_acc int
);
create table account 
(uid int,
user_id int
);

create table college(
c_id int (20) primary key,
c_name varchar(50) not null,
c_location varchar(255),
c_rank int unique,
c_students_ct int
)

delimiter $

create procedure college_add(in c_id int, in c_name varchar(50), in c_location varchar(255),
 in c_rank int, in c_students_ct int)
 
begin
declare continue handler for 1062
begin
select "Duplicate values";
end;
insert into college values (c_id,c_name,c_location,c_rank,c_students_ct);
select "this is after insertion";
end $

delimiter ;

call college_add(102,"royal college","bandra",10,500);

select * from  college;



-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025
-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025-- 09-08-2025

-- declare --open --fetch  --close 
delimiter $
create procedure Curexe() 
begin 
declare sid int;
declare sname varchar(25);
DECLARE n INT;

declare cur cursor for select rest_id,customer_name from orders;

declare continue handler for 1329
begin
set n=1;
end ;

open cur;

	firstloop:loop

    if n=1 then
    leave firstloop;
    end if; 
    fetch cur into sid,sname;
	select sid,sname;
    end loop firstloop;
    
close cur;
END $
delimiter ;

call Curexe();








